#-*- coding: utf-8 -*-

# モジュールのインポート
import matplotlib as mpl
mpl.use('tkagg')
import matplotlib.pyplot as plt
import numpy as np
import designlab as dl


# 定数を定義
X_MIN = -100.0
X_MAX = 300.0
Z_MIN = -200.0
Z_MAX = 200.0


if __name__ == "__main__":

    fig = plt.figure()
    ax_table = fig.add_subplot(3,3,2)
    ax = fig.add_subplot(1,1,1)

    ax.plot([X_MIN,X_MAX],[-20,-20], color = "red",linestyle = "dotted")               # グラフを描画する
    #ax.plot([X_MIN,X_MAX],[-50,-50], color = "orange",linestyle = "dotted")               # グラフを

    # 0,0を通る線を描画する
    #ax.plot([0,0],[Z_MIN,Z_MAX], color = "black", lw = 0.5)       # グラフを描画する    
    #ax.plot([X_MIN,X_MAX],[0,0], color = "black", lw = 0.5)       # グラフを描画する

    # 以下グラフの作成，描画

    # 脚が出せる力のグラフを描画
    hexapod_leg_power = dl.HexapodLegPower()
    #hexapod_leg_power.render(fig, ax,X_MIN,X_MAX,Z_MIN,Z_MAX)

    # 脚の可動範囲の近似値を描画
    app_graph = dl.ApproximatedGraphRenderer()
    app_graph.set_min_leg_radius(130)
    # app_graph.set_draw_fill(False)
    app_graph.set_alpha(0.5)
    app_graph.render(ax,-180, 0.1)

    # 脚を描画
    leg_renderer = dl.HexapodLegRenderer()
    leg_renderer.set_event(fig, ax, ax_table)
    leg_renderer.set_circle(False)
    leg_renderer.set_wedge(False)
    leg_renderer.set_img_file_name("result/img_act.png")    # 左クリックで保存するファイル名を指定

    # 脚の可動範囲を描画する
    hexapod_range_of_motion = dl.HexapodRangeOfMotion()
    hexapod_range_of_motion.render_lower_leg_range(ax,'black',1)

    # #緊急追加

    # #平面
    # x_falture = [122.027,127.814,123.527,130.581,127.547,123.669,124.248,124.466,128.309,128.042,124.903,127.407,128.201,122.027,130.063,130.876,124.714,125.434,121.711,126.958,122.027,130.063,124.007,121.568,122.004,120.959,122.448,123.572,124.283,122.027,130.063,128.691,130.225,128.594,121.49,124.477,120.228,121.466,123.049,126.626,123.896,124.182,127.023,126.248,120.733,121.162,121.667,]
    # z_falture = [-30,-30,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-30,-30,-31.116,-31.116,-31.116,-31.116,-31.116,-30,-30,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-30,-30,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,]
    
    # # 15
    # x_falture += [122.027,127.814,123.527,121.075,124.666,129.875,123.727,128.971,128.089,128.527,121.532,132.889,127.346,296.695,125.612,130.595,122.459,]
    # z_falture += [-30,-30,-31.116,-25.465,-31.231,-31.116,-31.174,-33.376,-33.611,-34.077,-32.116,-26.328,-27.449,-198.043,-31.116,-23.558,-44.334,]

    # # -15
    # x_falture += [122.027,127.814,123.527,128.463,127.726,120.798,125.801,122.027,130.063,122.027,130.063,128.414,123.373,122.027,130.063,120.543,122.473,126.049,120.03,122.415,123.406,125.144,122.775,120.711,]
    # z_falture += [-30,-30,-31.116,-31.116,-31.116,-36.475,-33.936,-30,-30,-30,-30,-36.475,-40.918,-30,-30,-36.475,-31.116,-31.116,-31.116,-31.116,-40.4,-35.4,-35.4,-41.086,]
 
    # # 100
    # x_falture += [122.027,127.814,125.139,122.758,122.405,126.312,122.027,122.749,122.05,121.99,123.857,123.305,124.489,122.613,122.333,124.624,122.027,130.063,126.869,128.527,130.573,120.385,126.321,120.617,126.789,123.894,125.821,129.697,126.653,126.72,]
    # z_falture += [-30,-30,-31.116,-44.959,-31.116,-31.116,-30,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-30,-30,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,]
    
    # # -100
    # x_falture += [122.027,127.814,123.527,126.212,124.682,122.027,130.063,130.931,122.805,129.45,124.283,129.902,121.342,120.653,121.851,122.027,130.063,124.684,120.129,122.16,128.052,122.027,130.063,129.64,127.651,128.828,123.23,120.438,127.104,122.027,130.063,129.869,125.818]
    # z_falture += [-30,-30,-31.116,-31.116,-31.116,-30,-30,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-47.362,-31.116,-30,-30,-31.116,-31.116,-31.116,-31.116,-30,-30,-31.116,-31.116,-31.116,-31.116,-31.116,-31.116,-30,-30,-31.116,-31.116]

    # ax.scatter(x_falture,z_falture,marker='x',color='black',s=10)

    ax.set_xlim(X_MIN, X_MAX)   # x 軸の範囲を設定
    ax.set_ylim(Z_MIN, Z_MAX)   # z 軸の範囲を設定
    #ax.set_xlim(50, 200)   # x 軸の範囲を設定
    #ax.set_ylim(-100, 50)   # z 軸の範囲を設定

    ax.set_xlabel('x [mm]')     # x軸のラベルを設定
    ax.set_ylabel('z [mm]')     # y軸のラベルを設定

    ax.set_aspect('equal')  # x,y軸のスケールを揃える

    ax_table.set_visible(False)

    plt.show()  # 表示する